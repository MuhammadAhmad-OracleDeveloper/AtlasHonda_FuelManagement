package model.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 27 11:24:33 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblFmdailyConEngBoilerDImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        FmdailyConEngBoilerDId,
        Hours,
        InletMeterRead,
        OutletMeterRead,
        NetDifference,
        FmdailyConEngMId,
        FmboilerId,
        CreatedBy,
        CreatedDate,
        UpdatedBy,
        UpdatedDate,
        TblFmdailyConEngM,
        TblFmboiler;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int FMDAILYCONENGBOILERDID = AttributesEnum.FmdailyConEngBoilerDId.index();
    public static final int HOURS = AttributesEnum.Hours.index();
    public static final int INLETMETERREAD = AttributesEnum.InletMeterRead.index();
    public static final int OUTLETMETERREAD = AttributesEnum.OutletMeterRead.index();
    public static final int NETDIFFERENCE = AttributesEnum.NetDifference.index();
    public static final int FMDAILYCONENGMID = AttributesEnum.FmdailyConEngMId.index();
    public static final int FMBOILERID = AttributesEnum.FmboilerId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int TBLFMDAILYCONENGM = AttributesEnum.TblFmdailyConEngM.index();
    public static final int TBLFMBOILER = AttributesEnum.TblFmboiler.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblFmdailyConEngBoilerDImpl() {
    }

    /**
     * Gets the attribute value for FmdailyConEngBoilerDId, using the alias name FmdailyConEngBoilerDId.
     * @return the value of FmdailyConEngBoilerDId
     */
    public BigDecimal getFmdailyConEngBoilerDId() {
        return (BigDecimal) getAttributeInternal(FMDAILYCONENGBOILERDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmdailyConEngBoilerDId.
     * @param value value to set the FmdailyConEngBoilerDId
     */
    public void setFmdailyConEngBoilerDId(BigDecimal value) {
        setAttributeInternal(FMDAILYCONENGBOILERDID, value);
    }

    /**
     * Gets the attribute value for Hours, using the alias name Hours.
     * @return the value of Hours
     */
    public BigDecimal getHours() {
        return (BigDecimal) getAttributeInternal(HOURS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Hours.
     * @param value value to set the Hours
     */
    public void setHours(BigDecimal value) {
        setAttributeInternal(HOURS, value);
    }

    /**
     * Gets the attribute value for InletMeterRead, using the alias name InletMeterRead.
     * @return the value of InletMeterRead
     */
    public BigDecimal getInletMeterRead() {
        return (BigDecimal) getAttributeInternal(INLETMETERREAD);
    }

    /**
     * Sets <code>value</code> as the attribute value for InletMeterRead.
     * @param value value to set the InletMeterRead
     */
    public void setInletMeterRead(BigDecimal value) {
        setAttributeInternal(INLETMETERREAD, value);
    }

    /**
     * Gets the attribute value for OutletMeterRead, using the alias name OutletMeterRead.
     * @return the value of OutletMeterRead
     */
    public BigDecimal getOutletMeterRead() {
        return (BigDecimal) getAttributeInternal(OUTLETMETERREAD);
    }

    /**
     * Sets <code>value</code> as the attribute value for OutletMeterRead.
     * @param value value to set the OutletMeterRead
     */
    public void setOutletMeterRead(BigDecimal value) {
        setAttributeInternal(OUTLETMETERREAD, value);
    }

    /**
     * Gets the attribute value for NetDifference, using the alias name NetDifference.
     * @return the value of NetDifference
     */
    public BigDecimal getNetDifference() {
        return (BigDecimal) getAttributeInternal(NETDIFFERENCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for NetDifference.
     * @param value value to set the NetDifference
     */
    public void setNetDifference(BigDecimal value) {
        setAttributeInternal(NETDIFFERENCE, value);
    }

    /**
     * Gets the attribute value for FmdailyConEngMId, using the alias name FmdailyConEngMId.
     * @return the value of FmdailyConEngMId
     */
    public BigDecimal getFmdailyConEngMId() {
        return (BigDecimal) getAttributeInternal(FMDAILYCONENGMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmdailyConEngMId.
     * @param value value to set the FmdailyConEngMId
     */
    public void setFmdailyConEngMId(BigDecimal value) {
        setAttributeInternal(FMDAILYCONENGMID, value);
    }

    /**
     * Gets the attribute value for FmboilerId, using the alias name FmboilerId.
     * @return the value of FmboilerId
     */
    public BigDecimal getFmboilerId() {
        return (BigDecimal) getAttributeInternal(FMBOILERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmboilerId.
     * @param value value to set the FmboilerId
     */
    public void setFmboilerId(BigDecimal value) {
        setAttributeInternal(FMBOILERID, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getTblFmdailyConEngM() {
        return (EntityImpl) getAttributeInternal(TBLFMDAILYCONENGM);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTblFmdailyConEngM(EntityImpl value) {
        setAttributeInternal(TBLFMDAILYCONENGM, value);
    }

    /**
     * @return the associated entity TblFmboilerImpl.
     */
    public TblFmboilerImpl getTblFmboiler() {
        return (TblFmboilerImpl) getAttributeInternal(TBLFMBOILER);
    }

    /**
     * Sets <code>value</code> as the associated entity TblFmboilerImpl.
     */
    public void setTblFmboiler(TblFmboilerImpl value) {
        setAttributeInternal(TBLFMBOILER, value);
    }

    /**
     * @param fmdailyConEngBoilerDId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal fmdailyConEngBoilerDId) {
        return new Key(new Object[] { fmdailyConEngBoilerDId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.TblFmdailyConEngBoilerD");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
             try {
                 loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessRID"));
             } catch(Exception ex) {
                 ex.printStackTrace();
             }
             
             if (operation == DML_INSERT) {
                 setCreatedBy(loginId);
                 setUpdatedBy(loginId);
                 } else if(operation == DML_UPDATE) {
                 setUpdatedBy(loginId);
             }
        super.doDML(operation, e);
    }
}

