package model.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 27 12:10:38 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblFmpoDImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        FmpoDId,
        FmpoMId,
        FmitemsId,
        Fmqty,
        Fmrate,
        Fmgamt,
        FmstPerc,
        FmstAmt,
        FmnetAmt,
        CreatedBy,
        CreatedDate,
        UpdatedBy,
        UpdatedDate,
        TblFmitems,
        TblFmpoM;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int FMPODID = AttributesEnum.FmpoDId.index();
    public static final int FMPOMID = AttributesEnum.FmpoMId.index();
    public static final int FMITEMSID = AttributesEnum.FmitemsId.index();
    public static final int FMQTY = AttributesEnum.Fmqty.index();
    public static final int FMRATE = AttributesEnum.Fmrate.index();
    public static final int FMGAMT = AttributesEnum.Fmgamt.index();
    public static final int FMSTPERC = AttributesEnum.FmstPerc.index();
    public static final int FMSTAMT = AttributesEnum.FmstAmt.index();
    public static final int FMNETAMT = AttributesEnum.FmnetAmt.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int TBLFMITEMS = AttributesEnum.TblFmitems.index();
    public static final int TBLFMPOM = AttributesEnum.TblFmpoM.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblFmpoDImpl() {
    }

    /**
     * Gets the attribute value for FmpoDId, using the alias name FmpoDId.
     * @return the value of FmpoDId
     */
    public BigDecimal getFmpoDId() {
        return (BigDecimal) getAttributeInternal(FMPODID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmpoDId.
     * @param value value to set the FmpoDId
     */
    public void setFmpoDId(BigDecimal value) {
        setAttributeInternal(FMPODID, value);
    }

    /**
     * Gets the attribute value for FmpoMId, using the alias name FmpoMId.
     * @return the value of FmpoMId
     */
    public BigDecimal getFmpoMId() {
        return (BigDecimal) getAttributeInternal(FMPOMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmpoMId.
     * @param value value to set the FmpoMId
     */
    public void setFmpoMId(BigDecimal value) {
        setAttributeInternal(FMPOMID, value);
    }

    /**
     * Gets the attribute value for FmitemsId, using the alias name FmitemsId.
     * @return the value of FmitemsId
     */
    public BigDecimal getFmitemsId() {
        return (BigDecimal) getAttributeInternal(FMITEMSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmitemsId.
     * @param value value to set the FmitemsId
     */
    public void setFmitemsId(BigDecimal value) {
        setAttributeInternal(FMITEMSID, value);
    }

    /**
     * Gets the attribute value for Fmqty, using the alias name Fmqty.
     * @return the value of Fmqty
     */
    public Number getFmqty() {
        return (Number) getAttributeInternal(FMQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Fmqty.
     * @param value value to set the Fmqty
     */
    public void setFmqty(Number value) {
        setAttributeInternal(FMQTY, value);
    }

    /**
     * Gets the attribute value for Fmrate, using the alias name Fmrate.
     * @return the value of Fmrate
     */
    public Number getFmrate() {
        return (Number) getAttributeInternal(FMRATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Fmrate.
     * @param value value to set the Fmrate
     */
    public void setFmrate(Number value) {
        setAttributeInternal(FMRATE, value);
    }

    /**
     * Gets the attribute value for Fmgamt, using the alias name Fmgamt.
     * @return the value of Fmgamt
     */
    public Number getFmgamt() {
        return (Number) getAttributeInternal(FMGAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Fmgamt.
     * @param value value to set the Fmgamt
     */
    public void setFmgamt(Number value) {
        setAttributeInternal(FMGAMT, value);
    }

    /**
     * Gets the attribute value for FmstPerc, using the alias name FmstPerc.
     * @return the value of FmstPerc
     */
    public Number getFmstPerc() {
        return (Number) getAttributeInternal(FMSTPERC);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmstPerc.
     * @param value value to set the FmstPerc
     */
    public void setFmstPerc(Number value) {
        setAttributeInternal(FMSTPERC, value);
    }

    /**
     * Gets the attribute value for FmstAmt, using the alias name FmstAmt.
     * @return the value of FmstAmt
     */
    public Number getFmstAmt() {
        return (Number) getAttributeInternal(FMSTAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmstAmt.
     * @param value value to set the FmstAmt
     */
    public void setFmstAmt(Number value) {
        setAttributeInternal(FMSTAMT, value);
    }

    /**
     * Gets the attribute value for FmnetAmt, using the alias name FmnetAmt.
     * @return the value of FmnetAmt
     */
    public Number getFmnetAmt() {
        return (Number) getAttributeInternal(FMNETAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmnetAmt.
     * @param value value to set the FmnetAmt
     */
    public void setFmnetAmt(Number value) {
        setAttributeInternal(FMNETAMT, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * @return the associated entity TblFmitemsImpl.
     */
    public TblFmitemsImpl getTblFmitems() {
        return (TblFmitemsImpl) getAttributeInternal(TBLFMITEMS);
    }

    /**
     * Sets <code>value</code> as the associated entity TblFmitemsImpl.
     */
    public void setTblFmitems(TblFmitemsImpl value) {
        setAttributeInternal(TBLFMITEMS, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getTblFmpoM() {
        return (EntityImpl) getAttributeInternal(TBLFMPOM);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTblFmpoM(EntityImpl value) {
        setAttributeInternal(TBLFMPOM, value);
    }

    /**
     * @param fmpoDId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal fmpoDId) {
        return new Key(new Object[] { fmpoDId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.TblFmpoD");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
             try {
                 loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessRID"));
             } catch(Exception ex) {
                 ex.printStackTrace();
             }
             
             if (operation == DML_INSERT) {
                 setCreatedBy(loginId);
                 setUpdatedBy(loginId);
                 } else if(operation == DML_UPDATE) {
                 setUpdatedBy(loginId);
             }
        super.doDML(operation, e);
    }
}

