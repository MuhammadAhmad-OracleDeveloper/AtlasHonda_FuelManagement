package model.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 27 11:45:24 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblFmlabtestImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        FmlabtestId,
        FmlabtestName,
        Ast,
        MaxValue,
        MinValue,
        Remarks,
        UomId,
        CreatedBy,
        CreatedDate,
        UpdatedBy,
        UpdatedDate;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int FMLABTESTID = AttributesEnum.FmlabtestId.index();
    public static final int FMLABTESTNAME = AttributesEnum.FmlabtestName.index();
    public static final int AST = AttributesEnum.Ast.index();
    public static final int MAXVALUE = AttributesEnum.MaxValue.index();
    public static final int MINVALUE = AttributesEnum.MinValue.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int UOMID = AttributesEnum.UomId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblFmlabtestImpl() {
    }

    /**
     * Gets the attribute value for FmlabtestId, using the alias name FmlabtestId.
     * @return the value of FmlabtestId
     */
    public BigDecimal getFmlabtestId() {
        return (BigDecimal) getAttributeInternal(FMLABTESTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmlabtestId.
     * @param value value to set the FmlabtestId
     */
    public void setFmlabtestId(BigDecimal value) {
        setAttributeInternal(FMLABTESTID, value);
    }

    /**
     * Gets the attribute value for FmlabtestName, using the alias name FmlabtestName.
     * @return the value of FmlabtestName
     */
    public String getFmlabtestName() {
        return (String) getAttributeInternal(FMLABTESTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmlabtestName.
     * @param value value to set the FmlabtestName
     */
    public void setFmlabtestName(String value) {
        setAttributeInternal(FMLABTESTNAME, value);
    }

    /**
     * Gets the attribute value for Ast, using the alias name Ast.
     * @return the value of Ast
     */
    public String getAst() {
        return (String) getAttributeInternal(AST);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ast.
     * @param value value to set the Ast
     */
    public void setAst(String value) {
        setAttributeInternal(AST, value);
    }

    /**
     * Gets the attribute value for MaxValue, using the alias name MaxValue.
     * @return the value of MaxValue
     */
    public BigDecimal getMaxValue() {
        return (BigDecimal) getAttributeInternal(MAXVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MaxValue.
     * @param value value to set the MaxValue
     */
    public void setMaxValue(BigDecimal value) {
        setAttributeInternal(MAXVALUE, value);
    }

    /**
     * Gets the attribute value for MinValue, using the alias name MinValue.
     * @return the value of MinValue
     */
    public BigDecimal getMinValue() {
        return (BigDecimal) getAttributeInternal(MINVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MinValue.
     * @param value value to set the MinValue
     */
    public void setMinValue(BigDecimal value) {
        setAttributeInternal(MINVALUE, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the value of Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for UomId, using the alias name UomId.
     * @return the value of UomId
     */
    public BigDecimal getUomId() {
        return (BigDecimal) getAttributeInternal(UOMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UomId.
     * @param value value to set the UomId
     */
    public void setUomId(BigDecimal value) {
        setAttributeInternal(UOMID, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * @param fmlabtestId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal fmlabtestId) {
        return new Key(new Object[] { fmlabtestId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.TblFmlabtest");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
             try {
                 loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessUMID"));
             } catch(Exception ex) {
                 ex.printStackTrace();
             }
             
             if (operation == DML_INSERT) {
                 setCreatedBy(loginId);
                 setUpdatedBy(loginId);
                 } else if(operation == DML_UPDATE) {
                 setUpdatedBy(loginId);
             }
        super.doDML(operation, e);
    }
}

