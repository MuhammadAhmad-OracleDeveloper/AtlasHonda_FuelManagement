package model.EO;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jul 25 16:48:59 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblFmrnDipImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        FmrnDipId,
        FmrnMId,
        ProdDip,
        ActualDip,
        CompSize,
        Shortage,
        ShortPerChart,
        CreatedBy,
        CreatedDate,
        UpdatedBy,
        UpdatedDate,
        TblFmrnM;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int FMRNDIPID = AttributesEnum.FmrnDipId.index();
    public static final int FMRNMID = AttributesEnum.FmrnMId.index();
    public static final int PRODDIP = AttributesEnum.ProdDip.index();
    public static final int ACTUALDIP = AttributesEnum.ActualDip.index();
    public static final int COMPSIZE = AttributesEnum.CompSize.index();
    public static final int SHORTAGE = AttributesEnum.Shortage.index();
    public static final int SHORTPERCHART = AttributesEnum.ShortPerChart.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int TBLFMRNM = AttributesEnum.TblFmrnM.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblFmrnDipImpl() {
    }

    /**
     * Gets the attribute value for FmrnDipId, using the alias name FmrnDipId.
     * @return the value of FmrnDipId
     */
    public Number getFmrnDipId() {
        return (Number) getAttributeInternal(FMRNDIPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmrnDipId.
     * @param value value to set the FmrnDipId
     */
    public void setFmrnDipId(Number value) {
        setAttributeInternal(FMRNDIPID, value);
    }

    /**
     * Gets the attribute value for FmrnMId, using the alias name FmrnMId.
     * @return the value of FmrnMId
     */
    public Number getFmrnMId() {
        return (Number) getAttributeInternal(FMRNMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FmrnMId.
     * @param value value to set the FmrnMId
     */
    public void setFmrnMId(Number value) {
        setAttributeInternal(FMRNMID, value);
    }

    /**
     * Gets the attribute value for ProdDip, using the alias name ProdDip.
     * @return the value of ProdDip
     */
    public Number getProdDip() {
        return (Number) getAttributeInternal(PRODDIP);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProdDip.
     * @param value value to set the ProdDip
     */
    public void setProdDip(Number value) {
        setAttributeInternal(PRODDIP, value);
    }

    /**
     * Gets the attribute value for ActualDip, using the alias name ActualDip.
     * @return the value of ActualDip
     */
    public Number getActualDip() {
        return (Number) getAttributeInternal(ACTUALDIP);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActualDip.
     * @param value value to set the ActualDip
     */
    public void setActualDip(Number value) {
        setAttributeInternal(ACTUALDIP, value);
    }

    /**
     * Gets the attribute value for CompSize, using the alias name CompSize.
     * @return the value of CompSize
     */
    public Number getCompSize() {
        return (Number) getAttributeInternal(COMPSIZE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CompSize.
     * @param value value to set the CompSize
     */
    public void setCompSize(Number value) {
        setAttributeInternal(COMPSIZE, value);
    }

    /**
     * Gets the attribute value for Shortage, using the alias name Shortage.
     * @return the value of Shortage
     */
    public Number getShortage() {
        return (Number) getAttributeInternal(SHORTAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Shortage.
     * @param value value to set the Shortage
     */
    public void setShortage(Number value) {
        setAttributeInternal(SHORTAGE, value);
    }

    /**
     * Gets the attribute value for ShortPerChart, using the alias name ShortPerChart.
     * @return the value of ShortPerChart
     */
    public Number getShortPerChart() {
        return (Number) getAttributeInternal(SHORTPERCHART);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShortPerChart.
     * @param value value to set the ShortPerChart
     */
    public void setShortPerChart(Number value) {
        setAttributeInternal(SHORTPERCHART, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Timestamp value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedDate.
     * @param value value to set the UpdatedDate
     */
    public void setUpdatedDate(Timestamp value) {
        setAttributeInternal(UPDATEDDATE, value);
    }

    /**
     * @return the associated entity TblFmrnMImpl.
     */
    public TblFmrnMImpl getTblFmrnM() {
        return (TblFmrnMImpl) getAttributeInternal(TBLFMRNM);
    }

    /**
     * Sets <code>value</code> as the associated entity TblFmrnMImpl.
     */
    public void setTblFmrnM(TblFmrnMImpl value) {
        setAttributeInternal(TBLFMRNM, value);
    }

    /**
     * @param fmrnDipId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number fmrnDipId) {
        return new Key(new Object[] { fmrnDipId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.TblFmrnDip");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
                try {
                    loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessUMID"));
                } catch(Exception ex) {
                    ex.printStackTrace();
                }
                
                if (operation == DML_INSERT) {
                    setCreatedBy(loginId);
                    setUpdatedBy(loginId);
                    } else if(operation == DML_UPDATE) {
                    setUpdatedBy(loginId);
                }
        super.doDML(operation, e);
    }
}

